# Train
[DEFAULT]
debug = {{ options.debug }}
host_href = {{ options.external_endpoints.watcher_api.url }}

{% include "parts/section-transport-url" %}

{% include "parts/database" %}

{% include "parts/section-keystone-authtoken" %}

{% include "parts/section-oslo-messaging-rabbit" %}

{% include "parts/section-oslo-middleware" %}

[api]
# The listen IP address for the watcher API server (host address value)
host = 0.0.0.0

# The port for the watcher API server (port value)
port = {{ options.service_listen_info.watcher_api.port }}

# Number of workers for Watcher API service. The default is equal to the number
# of CPUs available if that can be determined, else a default worker count of 1
# is returned. (integer value)
# Minimum value: 1
workers = {{ options.workers }}

[collector]
# The cluster data model plugin names.
collector_plugins = {{ options.collector_plugins }}

{% if 'grafana' in options.datasources -%}
[grafana_client]
# See https://docs.openstack.org/watcher/latest/datasources/grafana.html for
# details on how these options are used.

token = {{ options.grafana_auth_token }}
base_url = {{ options.grafana_base_url }}

# Mapping of datasource metrics to grafana project ids. Dictionary values
# should be positive integers.
project_id_map = {{ options.grafana_project_id_map }}

# Mapping of datasource metrics to grafana databases. Values should be strings.
database_map = {{ options.grafana_database_map }}

# Mapping of datasource metrics to resource attributes. Values should be
# strings.
attribute_map = {{ options.grafana_attribute_map }}

# Mapping of datasource metrics to grafana translators. Values should be
# strings.
translator_map = {{ options.grafana_translator_map }}

# Mapping of datasource metrics to grafana queries. Values should be strings
# for which the .format method will transform it.
query_map = {{ options.grafana_query_map }}

[grafana_translators]
# Keys are the names of retention periods in InfluxDB and the values should
# correspond with the maximum time they can retain in seconds.
retention_periods = {{ options.grafana_retention_periods }}
{%- endif %}

[cinder_client]
# Type of endpoint to use in cinderclient. (string value)
{% if options.use_internal_endpoints -%}
endpoint_type = internalURL
{% else -%}
endpoint_type = publicURL
{%- endif %}

# Region in Identity service catalog to use for communication with the
# OpenStack service. (string value)
region_name = {{ options.region }}

[glance_client]
# Type of endpoint to use in glanceclient. (string value)
{% if options.use_internal_endpoints -%}
endpoint_type = internalURL
{% else -%}
endpoint_type = publicURL
{%- endif %}

# Region in Identity service catalog to use for communication with the
# OpenStack service. (string value)
region_name = {{ options.region }}

[gnocchi_client]
# Type of endpoint to use in gnocchi client. (string value)
{% if options.use_internal_endpoints -%}
endpoint_type = internal
{% else -%}
endpoint_type = public
{%- endif %}

# Region in Identity service catalog to use for communication with the
# OpenStack service. (string value)
region_name = {{ options.region }}

[keystone_client]
# Type of endpoint to use in keystoneclient. (string value)
{% if options.use_internal_endpoints -%}
interface = internal
{% else -%}
interface = public
{%- endif %}

# Region in Identity service catalog to use for communication with the
# OpenStack service. (string value)
region_name = {{ options.region }}

[neutron_client]
# Type of endpoint to use in neutronclient. (string value)
{% if options.use_internal_endpoints -%}
endpoint_type = internalURL
{% else -%}
endpoint_type = publicURL
{%- endif %}

# Region in Identity service catalog to use for communication with the
# OpenStack service. (string value)
region_name = {{ options.region }}

[nova_client]
# Type of endpoint to use in novaclient. (string value)
{% if options.use_internal_endpoints -%}
endpoint_type = internalURL
{% else -%}
endpoint_type = publicURL
{%- endif %}

# Region in Identity service catalog to use for communication with the
# OpenStack service. (string value)
region_name = {{ options.region }}

[placement_client]
# Type of endpoint when using placement service. (string value)
{% if options.use_internal_endpoints -%}
interface = internal
{% else -%}
interface = public
{%- endif %}

# Region in Identity service catalog to use for communication with the
# OpenStack service. (string value)
region_name = {{ options.region }}

[watcher_applier]
# Number of workers for applier, default value is 1. (integer value)
# Minimum value: 1
workers = {{ options.workers }}

[watcher_clients_auth]
auth_type = password
auth_uri = {{ identity_service.service_protocol }}://{{ identity_service.service_host }}:{{ identity_service.service_port }}
auth_url = {{ identity_service.auth_protocol }}://{{ identity_service.auth_host }}:{{ identity_service.auth_port }}
project_domain_name = {{ identity_service.service_domain }}
user_domain_name = {{ identity_service.service_domain }}
project_name = {{ identity_service.service_tenant }}
username = {{ identity_service.service_username }}
password = {{ identity_service.service_password }}

[watcher_cluster_data_model_collectors.baremetal]
period = {{ options.data_model_period }}

[watcher_cluster_data_model_collectors.compute]
period = {{ options.data_model_period }}

[watcher_cluster_data_model_collectors.storage]
period = {{ options.data_model_period }}

[watcher_datasources]
# Datasources to use in order to query the needed metrics. If one of strategy
# metric is not available in the first datasource, the next datasource will be
# chosen. This is the default for all strategies unless a strategy has a
# specific override. (list value)
datasources = {{ options.datasources }}

[watcher_decision_engine]
# The maximum number of threads that can be used to execute strategies. (integer
# value)
max_workers = {{ options.workers }}

# An expiry timespan (hours). Watcher invalidates any action plan for which its
# creation time - whose number of hours has been offset by this value - is older
# that the current time. (integer value)
action_plan_expiry = {{ options.action_plan_expiry }}

# Interval (in seconds) for checking action plan expiry. (integer value)
check_periodic_interval = {{ options.check_periodic_interval }}

[watcher_planner]
# The selected planner used to schedule the actions. (string value)
planner = {{ options.planner }}

{% if 'weight' == options.planner -%}
[watcher_planners.weight]
# These weights are used to schedule the actions. Action Plan will be build in
# accordance with sets of actions ordered by descending weights. Two action
# types cannot have the same weight.  (dict value)
weights = {{ options.planner_weights }}

# Number of actions to be run in parallel on a per action type basis. (dict
# value)
parallelization = {{ options.planner_parallelization }}
{%- endif %}

{% if 'workload_stabilization' == options.planner -%}
[watcher_planners.workload_stabilization]
# These weights are used to schedule the actions. (dict value)
weights = {{ options.planner_weights }}
{%- endif %}

{% if 'basic' == options.planner -%}
[watcher_strategies.basic]
# Check optimize metadata field in instance before migration. (boolean value)
check_optimize_metadata = {{ options.planner_check_optimize_metadata }}
{%- endif %}

{% if 'storage_capacity_balance' == options.planner -%}
[watcher_strategies.storage_capacity_balance]
# exclude pools (list value)
ex_pools = {{ options.planner_ex_pools }}
{%- endif %}
